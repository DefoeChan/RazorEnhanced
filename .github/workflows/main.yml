# This is a basic workflow to help you get started with Actions

name: AutoRelease

# Controls when the action will run. 
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Triggers the workflow on push or pull request events but only for the release/0.7 branch
  #push:
  #  branches: [ release/0.7 ]
  #pull_request:
  #  branches: [ release/0.7 ]

  
env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Debug
  
jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2


    - name: Read AssemblyVersion
      id: assembly_file
      uses: juliangruber/read-file-action@v1
      with:
        path: ./Razor/Properties/AssemblyInfo.cs
    
    - uses: actions-ecosystem/action-regex-match@v2
        id: get_version
        with:
          text: ${{ steps.assembly_file.outputs }}
          regex: 'AssemblyVersion\("(?'version'\d{1,2}.\d{1,2}.\d{1,2}.\d{1,2})(?'variant'[a-z]?)(?:-(?'release'[a-z]+))?"\)'

    
    
  - name: Should Build AssemblyVersion
      id: build_type
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: return steps.regex-match.outputs.match != '' ("refs/tags/", '');

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1
     
    - name: No need for build build
      if: ${{ true }}
      uses: andymckay/cancel-action@0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
         
    - name: Zip Razor
      id: create_zip
      uses: papeloto/action-zip@v1
      with:
        files: bin/Win32/Debug
        recursive: true
        dest: RazorEnhanced-${{ steps.get_tag.outputs.result }}.zip

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Deploy        
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./RazorEnhanced-${{ steps.get_tag.outputs.result }}.zip
        asset_name: RazorEnhanced-${{ steps.get_tag.outputs.result }}.zip
        asset_content_type: application/zip
